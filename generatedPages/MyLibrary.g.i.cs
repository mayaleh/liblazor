#pragma checksum "C:\Users\Salim Mayaleh\source\repos\PersonalLibrary\PersonalLibrary.Client\Pages\MyLibrary.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "d7f22ed1238d3c09769a9056175f7f3214d80af8"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace PersonalLibrary.Client.Pages
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Blazor;
    using Microsoft.AspNetCore.Blazor.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Blazor.Layouts;
    using Microsoft.AspNetCore.Blazor.Routing;
    using Microsoft.JSInterop;
    using PersonalLibrary.Client;
    using PersonalLibrary.Client.Shared;
    using PersonalLibrary.Shared;
    [Microsoft.AspNetCore.Blazor.Layouts.LayoutAttribute(typeof(MainLayout))]

    [Microsoft.AspNetCore.Blazor.Components.RouteAttribute("/my-library")]
    public class MyLibrary : Microsoft.AspNetCore.Blazor.Components.BlazorComponent
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Blazor.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 167 "C:\Users\Salim Mayaleh\source\repos\PersonalLibrary\PersonalLibrary.Client\Pages\MyLibrary.cshtml"
            
    /* ukazka, jak nastavit componente parametr: */
    /*
    [Parameter]
    private string Title { get; set; }
    */

    //Book[] books;
    //Author[] authorsBook;

    List<Book> books = new List<Book>();
    List<Author> authorsBook = new List<Author>();

    string searchFor;
    List<Book> searchResult = new List<Book>();
    string FiltrType = "listBooks";

    bool isSearch = false;

    int? editBookId = null;

    /*
     * Volani api server
     */
    protected override async Task OnInitAsync()
    {
        FiltrType = "listBooks";
        books = await Http.GetJsonAsync<List<Book>>("api/mylibrary/getBooks");
        //books = await Http.GetJsonAsync<Book[]>("api/mylibrary/getBooks");

        //result = await Http.GetStringAsync("api/mylibrary/getBooks");

    }

    protected async Task GetBooksByAuthor()
    {
        //books = await Http.GetJsonAsync<Book[]>("sample-data/books.json");
        FiltrType = "getByAuthors";
        //authorsBook = await Http.GetJsonAsync<Author[]>("api/mylibrary/getBooksByAuthor");
        authorsBook = await Http.GetJsonAsync<List<Author>>("api/mylibrary/getBooksByAuthor");
    }


    private void SearchFor()
    {
        if (!string.IsNullOrEmpty(searchFor))
        {
            isSearch = true;
            /*
        searchResult = books.FindAll(
            x =>
                (x.Name.Contains(searchFor))
                //|| (x.Place.Contains(searchFor))
                //|| (x.About.Contains(searchFor))
                //|| (x.Author.Name.Contains(searchFor))
            );
            */
            searchResult = books.FindAll(
                delegate (Book bk)
                {
                    return (bk.Name.Contains(searchFor) 
                        //|| bk.Place.Contains(searchFor) 
                        //|| bk.About.Contains(searchFor)
                        //|| bk.Author.Name.Contains(searchFor)
                        );
                }
            );
        }
        else
        {

            isSearch = false;
        }
    }


#line default
#line hidden
        [global::Microsoft.AspNetCore.Blazor.Components.InjectAttribute] private HttpClient Http { get; set; }
    }
}
#pragma warning restore 1591
