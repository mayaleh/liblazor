@page "/my-library"
@using PersonalLibrary.Shared

@inject HttpClient Http


<h1>My Library List</h1>

<p>
    <NavLink href="/form-book" Match=NavLinkMatch.All>
        <button class="btn btn-primary">
            <span class="oi oi-plus"></span>
            Add Book
        </button>
    </NavLink>
</p>

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">

            <li class="nav-item dropdown">
                <a class="nav-link dropdown-toggle" id="navbarDropdown" role="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Filtr
                </a>
                <div class="dropdown-menu" aria-labelledby="navbarDropdown">
                    <a class="dropdown-item" onclick="@OnInitAsync">List knih</a>
                    <div class="dropdown-divider"></div>
                    <a class="dropdown-item" onclick="@GetBooksByAuthor">Podle autora</a>
                </div>
            </li>
        </ul>
    </div>
</nav>
@if (!books.Any() && !authorsBook.Any())
{
    <div class="text-center">
        <div class="spinner-border" role="status">
            <span class="sr-only">Loading...</span>
        </div>
    </div>
}
else
{
    @switch (FiltrType)
    {
        case "listBooks":
            <div class="row">
                <div class="col-3">
                    <div class="form-group">
                        <input bind="@searchFor" onchange="@SearchFor" type="text" class="form-control" id="search" aria-describedby="searchHelp" placeholder="Search..." />
                        <small id="searchHelp" class="form-text text-muted">Search for...</small>

                    </div>
                </div>
                <div class="col">
                    <button onclick="@SearchFor" class="btn btn-primary">
                        <span class="oi oi-magnifying-glass"></span>
                        Search
                    </button>
                </div>
            </div>

            @if (isSearch)
            {
                <h2>Search result:</h2>
                @if (!searchResult.Any())
                {
                    <p>Nothing found...</p>
                }
                else
                {
                    <ul>

                        @foreach (var found in searchResult)
                        {
                            <li>Book name: <b>@found.Name</b> - Author: <b>@found.Author.Name</b> - Place: <b>@found.Place</b></li>
                        }
                    </ul>
                }
            }

            @if (editBookId != null)
            {
                <div class="padding-md border border-info">
                    <div class="row">
                        <div class="col-12 text-right">
                            <div class="text-right">
                                <button onclick="@(()=> editBookId = null )" class="btn btn-danger">
                                    <span class="oi oi-x"></span>
                                </button>
                            </div>
                        </div>
                    </div>
                    <div class="padding-y-sm">
                        @* Todo po editaci upatuj tabulku, asi nejaky event handler pro send update... *@
                        <FormBook BookId="@Convert.ToInt32(editBookId)" IsEdit="true" />
                    </div>
                </div>

                <br />

            }


            @if (removedBookName != null)
            {
                <div class="row">
                    <div class="col-12">
                        <div class="alert alert-success" role="alert">
                            <div class="text-right">
                                <button onclick="@(()=> removedBookName = null )" class="btn btn-danger">
                                    <span class="oi oi-x"></span>
                                </button>
                            </div>
                            Book: <b>@removedBookName</b> deleted successfully.
                        </div>
                    </div>
                </div>
            }

            <div class="row">
                <div class="text-right">
                    <button onclick="@OnInitAsync" class="btn btn-info">
                        <span class="oi oi-reload"></span>
                    </button>
                </div>
            </div>
            <table class="table">
                <thead>
                    <tr>
                        <th>Book Name</th>
                        <th>Author</th>
                        <th>Place</th>
                        <th>Action</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var book in books)
                    {
                        <tr>
                            <td>
                                <a href="#">
                                    <span class="oi oi-link-intact"></span>
                                    @book.Name
                                </a>
                            </td>
                            <td>
                                @if (book.Authorid != null)
                                {
                                    <NavLink href="/author/detail" Match=NavLinkMatch.All>
                                        @book.Author.Name
                                    </NavLink>
                                }
                            </td>
                            <td>@book.Place</td>
                            <td>
                                <a class="btn btn-success" onclick="@( () => editBookId = book.Bookid)">
                                    <span class="oi oi-pencil"></span>
                                    Edit
                                </a>
                                |
                                <a onclick="@(() => this.DeleteBook(book))" class="btn btn-danger">
                                    <span class="oi oi-trash"></span>
                                    Delete
                                </a>
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
            break;
        case "getByAuthors":
            @foreach (var author in authorsBook)
            {
                <h3>@author.Name:</h3>
                <ul>
                    @foreach (var book in author.Book)
                    {
                        <li>@book.Name</li>
                    }
                </ul>
            }
            break;
        default:
            <h2><em>Filtr doesnt exist</em></h2>
            break;
    }
}

@functions {
/* ukazka, jak nastavit componente parametr: */
/*
[Parameter]
private string Title { get; set; }
*/

//Book[] books;
//Author[] authorsBook;

List<Book> books = new List<Book>();
List<Author> authorsBook = new List<Author>();

string searchFor;
List<Book> searchResult = new List<Book>();
string FiltrType = "listBooks";

bool isSearch = false;

int? editBookId = null;

string removedBookName;

/*
 * Volani api server
 */
protected override async Task OnInitAsync()
{
    FiltrType = "listBooks";
    books = await Http.GetJsonAsync<List<Book>>("api/mylibrary/getBooks");
    //books = await Http.GetJsonAsync<Book[]>("api/mylibrary/getBooks");

    //result = await Http.GetStringAsync("api/mylibrary/getBooks");

}

protected async Task GetBooksByAuthor()
{
    //books = await Http.GetJsonAsync<Book[]>("sample-data/books.json");
    FiltrType = "getByAuthors";
    //authorsBook = await Http.GetJsonAsync<Author[]>("api/mylibrary/getBooksByAuthor");
    authorsBook = await Http.GetJsonAsync<List<Author>>("api/mylibrary/getBooksByAuthor");
}

private void DeleteBook(Book deleteBook)
{
    Http.SendJsonAsync(HttpMethod.Post, "/api/mylibrary/deleteBook", deleteBook);
    var item = books.SingleOrDefault(x => x.Bookid == deleteBook.Bookid);
    if (item != null)
        books.Remove(item);
    removedBookName = item.Name;
    //books.RemoveAll(x => x.Bookid == deleteBook);
}

private void SearchFor()
{
    if (!string.IsNullOrEmpty(searchFor))
    {
        isSearch = true;
        /*
    searchResult = books.FindAll(
        x =>
            (x.Name.Contains(searchFor))
            //|| (x.Place.Contains(searchFor))
            //|| (x.About.Contains(searchFor))
            //|| (x.Author.Name.Contains(searchFor))
        );
        */
        searchResult = books.FindAll(
            delegate (Book bk)
            {
                return (bk.Name.Contains(searchFor)
                    //|| bk.Place.Contains(searchFor)
                    //|| bk.About.Contains(searchFor)
                    //|| bk.Author.Name.Contains(searchFor)
                    );
            }
        );
    }
    else
    {

        isSearch = false;
    }
}

}
